generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes Like[]
  notifications Notification[] 
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String

  createdAt DateTime @default(now())
  notifications Notification[]

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId]) // composite index for faster queries (composite because uses 2 fields))
}

model Like{
  id String @id @default(cuid())
  userId String
  postId String

  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId]) // composite index for faster queries (composite because uses 2 fields))
  @@unique([userId, postId]) // this prevents same user liking post twice
}

model Follows{
  followerId String
  followingId String

  createdAt DateTime @default(now())

  //Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId]) // composite index for faster queries (composite because uses 2 fields))
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  //Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, postId, commentId]) // composite index for faster queries (composite because uses 3 fields))
}

enum NotificationType{
  LIKE
  COMMENT
  FOLLOW
}